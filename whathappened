#!/usr/bin/env python3

import subprocess
import re
import datetime
from collections import defaultdict
import os
import textwrap
import yaml
import argparse
import functools
import dateutil.parser

# ======================================================================================
# CONSTANTS
# ======================================================================================

THIS_FOLDER = os.path.dirname(os.path.abspath(__file__))
DEFAULT_CONFIG = os.path.join(THIS_FOLDER, "config.yaml")
GIT_TIME_FORMATTER = "%a %b %d %H:%M:%S %Y"
SEP1 = ":AUXOouLEU9e387:"
SEP2 = ":XDoH4XS3OETHHU:"

# ======================================================================================
# ARGUMENTS
# ======================================================================================

parser = argparse.ArgumentParser(
    description=(
        "Merges logs of multiple git repositories and sorts "
        "by date to figure out what you did in the past while."
    )
)
parser.add_argument(
    "config",
    nargs="?",
    action="store",
    default=DEFAULT_CONFIG,
    help="YAML file with configuration settings.",
)
parser.add_argument(
    "-u", "--user", dest="user", action="store", help="User to search.", default=None
)
parser.add_argument(
    "-w",
    "--width",
    dest="width",
    action="store",
    help="Line wrap width of the subject and body of the logs.",
    default=60,
)
parser.add_argument(
    "-r",
    "--reverse",
    dest="reverse",
    action="store_true",
    default=False,
    help="Whether to reverse the date sort.",
)
parser.add_argument(
    "-df",
    "--date-format",
    dest="date_format",
    action="store",
    help="Date format string, in the notation of the python datetime package.",
    default="%Y-%m-%d",
)
parser.add_argument(
    "-s",
    "--since",
    dest="since",
    action="store",
    help=(
        "Specifier for the first log to report. Either something dateutil.parser.parse "
        'can handle, like "January 12, 2017", or a valid git --since argument, '
        "like 2.months.ago (which is the default value)."
    ),
    default="2.months.ago",
)
parser.add_argument(
    "-b",
    "--before",
    dest="before",
    action="store",
    help="Specifier for the last log to report, see --since for formats",
    default=None,
)

# ======================================================================================
# FUNCTIONS
# ======================================================================================


def in_folder(fn):
    """
    Decorates function so that it runs in the working directory specified by the
    first argument passed to the function.

    :param fn: The function to wrap.
    :returns: The wrapped function.
    """

    @functools.wraps(fn)
    def wrapped(*args, **kwargs):
        current_path = os.getcwd()
        os.chdir(args[0])
        out = fn(*args, **kwargs)
        os.chdir(current_path)
        return out

    return wrapped


def make_git_date(input):
    """
    Tries to make a date git understands from the input string.
    """
    try:
        return dateutil.parser.parse(input).isoformat()
    except:
        return input


@in_folder
def get_repo_logs(repo_path, user=None, since=None, before=None):

    pretty_keys = ["date", "user", "desc", "subject", "body"]
    pretty_format = SEP2.join(["%ad", "%an", "%D", "%s", "%b"]) + SEP1

    args = [
        "git",
        "log",
        "--pretty=format:{}".format(pretty_format),
        "--date=local",
        "--reverse",
        "--all",
    ]
    if since:
        args.append("--since={}".format(make_git_date(since)))
    if before:
        args.append("--before={}".format(make_git_date(before)))
    if user:
        args.append("--author={}".format(user))
    out = subprocess.check_output(args).decode("utf-8")
    return [
        {key: part.strip() for key, part in zip(pretty_keys, line.split(SEP2))}
        for line in out.split(SEP1)
    ]


@in_folder
def get_repo_name(repo_path):
    """
    Gets the repo name of the given path. First looks at the remote origin git name,
    and if this fails, just takes the folder name.

    :param str repo_path: Path to the repo.
    :returns: Name for this git repo.
    :rtype: ``str``
    """
    current_path = os.getcwd()
    os.chdir(repo_path)
    try:
        out = subprocess.check_output(
            ["git", "config", "--get", "remote.origin.url"],
            shell=False,
            stderr=subprocess.STDOUT,
        )
        out = os.path.basename(out.decode("utf-8"))
    except:
        out = os.path.basename(repo_path)
    os.chdir(current_path)
    return out.replace(".git", "").strip()


def get_arg(name, args, config):
    return (
        config[name]
        if name in config and getattr(args, name) == parser.get_default(name)
        else getattr(args, name)
    )


def str_to_ms(input):
    """
    Turns the git-formatted input string into ms since the epoch.
    """
    return datetime.datetime.strptime(input, GIT_TIME_FORMATTER).timestamp()


def format_date(input, date_format):
    """
    Formats the git-formatted input string according to the date_format
    """
    return datetime.datetime.strptime(input, GIT_TIME_FORMATTER).strftime(date_format)


# ======================================================================================
# MAIN
# ======================================================================================


if __name__ == "__main__":

    args = parser.parse_args()

    # use the config file to get the list of repos
    config_file = args.config
    with open(config_file, "r") as f:
        config = yaml.load(f)
    try:
        repo_list = config["repos"]
    except KeyError:
        raise ValueError("Configuration requires an entry for 'repos'.")

    # command line overrides whatever's in config.yaml, though argparser stores defaults
    user = get_arg("user", args, config)
    width = int(get_arg("width", args, config))
    reverse = bool(get_arg("reverse", args, config))
    date_format = get_arg("date_format", args, config)
    since = get_arg("since", args, config)
    before = get_arg("before", args, config)

    # go and collect the logs for all repos
    logs = []
    max_lengths = defaultdict(int)
    for repo in repo_list:
        repo_dir = os.path.expanduser(repo)
        name = get_repo_name(repo_dir)
        # fetch the logs for this particular repo
        new_logs = [
            log
            for log in get_repo_logs(repo_dir, user=user, since=since, before=before)
            if "date" in log and len(log["date"]) > 0
        ]
        # now we modify a few things in each log, and also is a good opportunity
        # to look for max string lengths
        for log in new_logs:
            log["name"] = name
            log["body"] = log["body"]
            log["ts"] = str_to_ms(log["date"])
            log["date"] = format_date(log["date"], date_format)
            for key, val in log.items():
                if key is not "ts":
                    max_lengths[key] = max(max_lengths[key], len(val))
        logs += new_logs

    # sort by timestamp
    logs.sort(key=lambda x: x["ts"], reverse=reverse)

    if len(logs) > 0:
        meta_template = [
            "{{date:<{date}}}",
            "{{user:<{user}}}",
            "{{name:<{name}}}",
            "{{subject}}",
        ]
        if user:
            # only print user if user is not specified
            del meta_template[1]
        template = "  ".join(meta_template).format(**max_lengths)
        empty_log = {key: "" for key in logs[0]}
        body_template = " " * len(template.format(**empty_log)) + " {} {}"

        subject_wrapper = textwrap.TextWrapper(width=width, fix_sentence_endings=True)
        body_wrapper = textwrap.TextWrapper(width=width - 3, fix_sentence_endings=True)

        # finally, the printing loop
        for log in logs:
            for idx, line in enumerate(subject_wrapper.wrap(log["subject"])):
                if idx == 0:
                    log["subject"] = line
                    print(template.format(**log))
                else:
                    empty_log["subject"] = line
                    print(template.format(**empty_log))
            if len(log["body"]) > 2:
                for section in log["body"].split("* "):
                    for idx, line in enumerate(body_wrapper.wrap(section)):
                        s = "*" if idx == 0 else " "
                        print(body_template.format(s, line.replace("  ", " ", 500)))
